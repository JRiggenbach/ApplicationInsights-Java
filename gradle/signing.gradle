/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'signing'

task gpgSign(type: Sign) {

    println 'start'
    println 'root dir ' + rootDir
    println rootDir.getParent()

    def parentFolder = new File(rootDir.getParent())
    parentFolder = new File(parentFolder.getParent())
    println 'parent folder ' + parentFolder
    def rootFolder = new File(parentFolder.getParent(), 'AppInsights-Java')
    println 'root folder ' + rootFolder
    def rootProjectBuildDir = new File(rootFolder.getAbsolutePath(), 'workspace')
    rootProjectBuildDir = new File(rootProjectBuildDir, 'build')

    def artifactsSelfContainedDirectoryRoot = new File(rootProjectBuildDir, 'self-contained-artifacts')
    println 'artifactsSelfContainedDirectoryRoot ' + artifactsSelfContainedDirectoryRoot

//    println artifactsSelfContainedDirectoryRoot
//    artifactsSelfContainedDirectoryRoot.eachFile() { file->
//        println file.getName()
//    }

    println 'finish'
//    assert (dirToSign && !dirToSign.isEmpty() && new File(dirToSign).exists())
//    logger.info("[gpgSign] Directory for gpg signing files set to $dirToSign")
//
//    fileTree(dir: dirToSign).files.each {
//        f -> sign f
//        logger.info("[gpgSign] File $f added for gpg signing")
//    }
}

