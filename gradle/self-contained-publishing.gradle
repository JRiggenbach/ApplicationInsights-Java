/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'maven'
apply from: "$buildScriptsDir/provided-configuration.gradle"

def baseFolder = new File(artifactsDirectoryRoot, "unsigned")
def releaseNotesFileDir = "$project.buildDir/src/common/main/resources"

task copyReleaseNotesToCommonResourcesDir(type: Copy) {
    from(rootDir) {
        include "ThirdPartyNotices.txt"
    }
    into releaseNotesFileDir
}

processResources.dependsOn copyReleaseNotesToCommonResourcesDir

sourceSets {
    main {
        resources {
            srcDir releaseNotesFileDir
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    mavenDeployer
}

task prepareSourcesArchive(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
    doFirst {
        archiveName = "$archivesBaseName-$version-sources.jar"
    }
}

task prepareJavadocArchive(type: Jar){
    classifier = 'javadoc'
    from "$docsDir/javadoc"
    doFirst {
        archiveName = "$archivesBaseName-$version-javadoc.jar"
    }
    dependsOn javadoc
}

task copyLibsToGlobalArtifactsFolder(type: Copy) {
    from libsDir
    into new File(baseFolder, project.name)
    dependsOn assemble, prepareSourcesArchive, prepareJavadocArchive
}

task prepare {
    dependsOn copyLibsToGlobalArtifactsFolder
}

// endregion Publishing configuration

// region Public methods
ext {
    getArtifactsDirectory = this.&getArtifactsDirectory
}

def getArtifactsDirectory(artifactId) {
    File mainDir = new File(artifactsDirectoryRoot, "unsigned")
    File dir = new File(mainDir, artifactId)
    dir.mkdirs()

    return dir
}

// endregion Public methods
