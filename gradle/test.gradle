/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

def buildArchiveName = "build.jar"
def buildArchiveDir = buildDir
def buildArchiveLocalLocation = new File(buildArchiveDir, buildArchiveName)

task setRequiredRemoteProperties {
    ext.requriedProperties = ["remoteDirectoryName"]
    doLast {
        project.ext {
            baseRemoteDirectory = "/home/$userName/aiJavaSDK/$remoteDirectoryName"
            remoteDirectory = "$baseRemoteDirectory/workspace"
        }
    }
}

task jarBuild(type: Jar) {
    from rootDir
    destinationDir = buildArchiveDir
    archiveName = buildArchiveName

    // Exclude list
    // The cache.properties.lock is locked thus cannot (and need not) be zipped
    exclude ".gradle/*/taskArtifacts/cache.properties.lock"
    // No need for the complete git history as well
    exclude ".git"
    // Finally, to prevent recursive zipping we must exclude the output itself
    exclude "${convertAbsoluteToRelativePath(buildArchiveDir, projectDir)}/$buildArchiveName"
}

task prepareBuildOnRemote {
    dependsOn setRequiredRemoteProperties, jarBuild
    doLast {
        // Note: do not use the File class here as the this will translate the path
        // separator to DOS style while on the remote machine we need it to be linux style
        def archiveRemoteLocation = "$baseRemoteDirectory/$buildArchiveName"

        logger.info("MachineName: $machineName")
        logger.info("User: $userName")

        runRemoteCommand("Creating clean remote directory: $baseRemoteDirectory", "rm -f -r $baseRemoteDirectory && mkdir -p $remoteDirectory")
        runRemoteCopy(
                "Copying zipped binaries from $buildArchiveLocalLocation to $archiveRemoteLocation on machine $machineName",
                buildArchiveLocalLocation,
                "$userName@$machineName:$archiveRemoteLocation")
        runRemoteCommand("Extract zipped binaries from $archiveRemoteLocation on machine $machineName", "cd $remoteDirectory && jar xf $archiveRemoteLocation")
        runRemoteCommand("Allow execution of gradlew", "chmod +x $remoteDirectory/gradlew")
        runRemoteCommand("Changing gradlew linebreaks to unix style", "dos2unix $remoteDirectory/gradlew")
    }
}

task remoteTest {
    ext.requriedProperties = ["machineName", "userName", "pass", "localTestOutputFolderName"]
    dependsOn setRequiredRemoteProperties, prepareBuildOnRemote

    doLast {
        logger.info("MachineName: $machineName")
        logger.info("User: $userName")
        logger.info("Test output folder: $localTestOutputFolderName")

        try
        {
            runRemoteCommand("Executing tests remotely", "cd $remoteDirectory && ./gradlew cleanTest testAndCollect -x compileJava -x compileTestJava -PoutputFolderName=$localTestOutputFolderName")
        }
        finally
        {
            def testResultsArchiveName = "testResults.jar"
            def remoteTestResultsArchiveLocation = "$remoteDirectory/build/$testResultsArchiveName"

            runLocalCommand("Create local results directory: $rootProjectBuildDir", "if not exist \"$rootProjectBuildDir\" mkdir \"$rootProjectBuildDir\"")
            runRemoteCommand("Compress test results", "cd $remoteDirectory/build && jar cf $testResultsArchiveName $remoteTestResultsDirName $remoteTestReportDirName")
            runRemoteCopy("Copying test results back", "$userName@$machineName:$remoteTestResultsArchiveLocation", rootProjectBuildDir)
            runLocalCommand("Unzip test results archive", "cd \"$rootProjectBuildDir\" && jar xf $testResultsArchiveName")
        }
    }
}

task deployTestWebApps {
    ext.requriedProperties = ["machineName", "userName", "pass"]
    dependsOn setRequiredRemoteProperties, prepareBuildOnRemote
    doLast {
        // Note: do not use the File class here as the this will translate the path separator to
        // DOS style while on the remote machine we need it to be linux style
        def webAppName = "bookstore-spring"
        def webAppRelativePath = convertDosToUnixPath(getWebAppPath(webAppName))
        def webAppFullPath = "$remoteDirectory/$webAppRelativePath"
        logger.info("Web app full path: $webAppFullPath")

        def appServer = "TOMCAT"
        def appServerVersion = "7"
        def appServerEnvVariableName = "JAVA_APPSERVER_${appServer}_${appServerVersion}_HOME"
        logger.info("Application server path environment variable name: $appServerEnvVariableName")

        runRemoteCommand("Installing test app $webAppName on machine $machineName", "source /etc/profile && cp $webAppFullPath \$$appServerEnvVariableName/webapps")
    }
}

def runLocalCommand(description, command) {
    logger.info("[runLocalCommand] $description")
    exec {
        executable "cmd"
        args "/c $command"
    }
}

def runRemoteCopy(description, from, into) {
    logger.info("[runRemoteCopy] $description")
    exec {
        executable "pscp.exe"
        args "-r", "-pw", pass, "\"$from\"", "\"$into\""
    }
}

def runRemoteCommand(description, command) {
    logger.info("[runRemoteCommand] $description")
    exec {
        executable "plink.exe"
        args "-pw", pass, "$userName@$machineName", command
    }
}

def getWebAppPath(webAppName) {
    def webAppProjectsPath=":test:webapps"
    def projectLibsDir = project("$webAppProjectsPath:$webAppName").libsDir
    def projectWarPath = "$projectLibsDir/${webAppName}.war"

    convertAbsoluteToRelativePath(projectWarPath, projectDir)
}

def convertAbsoluteToRelativePath(absolutePath, currentPath) {
    def relative = "$absolutePath" - "$currentPath"
    (relative[0] == '/' || relative[0] == "\\") ? relative.substring(1) : relative;
}

def convertDosToUnixPath(path) {
    path.replace('\\', '/')
}
